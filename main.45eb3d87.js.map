{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.45eb3d87.js","sourceRoot":"..","sourcesContent":["function line_intersects(line1: Line, line2: Line) {\r\n  const s1_x = line1.point2.x - line1.point1.x,\r\n    s1_y = line1.point2.y - line1.point1.y,\r\n    s2_x = line2.point2.x - line2.point1.x,\r\n    s2_y = line2.point2.y - line2.point1.y;\r\n\r\n  const s =\r\n      (-s1_y * (line1.point1.x - line2.point1.x) +\r\n        s1_x * (line1.point1.y - line2.point1.y)) /\r\n      (-s2_x * s1_y + s1_x * s2_y),\r\n    t =\r\n      (s2_x * (line1.point1.y - line2.point1.y) -\r\n        s2_y * (line1.point1.x - line2.point1.x)) /\r\n      (-s2_x * s1_y + s1_x * s2_y);\r\n\r\n  return s >= 0 && s <= 1 && t >= 0 && t <= 1;\r\n}\r\n\r\nenum ShapeType {\r\n  Canvas,\r\n  Rectangle,\r\n  Circle,\r\n  Triangle,\r\n}\r\n\r\nconst ShapeNamesMap = {\r\n  [ShapeType.Canvas]: \"Canvas\",\r\n  [ShapeType.Rectangle]: \"Rectangle\",\r\n  [ShapeType.Circle]: \"Circle\",\r\n  [ShapeType.Triangle]: \"Triangle\",\r\n};\r\n\r\nexport class Point {\r\n  x: number;\r\n  y: number;\r\n\r\n  static readonly zero = new Point(0, 0);\r\n  static readonly unit = new Point(1, 1);\r\n\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  rotateAround(center: Point, angle: number): void {\r\n    const radians = (Math.PI / 180) * angle,\r\n      cos = Math.cos(radians),\r\n      sin = Math.sin(radians),\r\n      nx = cos * (this.x - center.x) + sin * (this.y - center.y) + center.x,\r\n      ny = cos * (this.y - center.y) - sin * (this.x - center.x) + center.y;\r\n    this.x = nx;\r\n    this.y = ny;\r\n  }\r\n}\r\n\r\nexport interface Line {\r\n  point1: Point;\r\n  point2: Point;\r\n}\r\n\r\nexport class Transform {\r\n  position: Point;\r\n  rotation: number;\r\n  scale: Point;\r\n\r\n  static readonly default = new Transform(Point.zero, 0, Point.unit);\r\n  static readonly zero = new Transform(Point.zero, 0, Point.zero);\r\n\r\n  add(other: Transform) {\r\n    return new Transform(\r\n      new Point(\r\n        this.position.x + other.position.x,\r\n        this.position.y + other.position.y\r\n      ),\r\n      this.rotation + other.rotation,\r\n      new Point(this.scale.x * other.scale.x, this.scale.y * other.scale.y)\r\n    );\r\n  }\r\n\r\n  constructor(position: Point, rotation: number, scale: Point) {\r\n    this.position = position;\r\n    this.rotation = rotation;\r\n    this.scale = scale;\r\n  }\r\n}\r\n\r\nexport class Param {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nabstract class Shape {\r\n  get type(): ShapeType {\r\n    return null;\r\n  }\r\n\r\n  parent: Shape;\r\n  transform: Transform;\r\n  children: Shape[];\r\n  selected: boolean;\r\n\r\n  constructor(transform: Transform, parent: Shape) {\r\n    this.transform = transform;\r\n    this.children = [];\r\n    this.selected = false;\r\n    this.parent = parent;\r\n  }\r\n\r\n  addChild(child: Shape) {\r\n    this.children.push(child);\r\n  }\r\n\r\n  removeChild(child: Shape) {\r\n    this.children = this.children.filter((node) => node !== child);\r\n  }\r\n\r\n  abstract getPoints(): Point[];\r\n  abstract isIntersecting(ngon: Shape): boolean;\r\n  abstract isPointInside(point: Point): boolean;\r\n  abstract isStable(): boolean;\r\n  abstract getCenter(): Point;\r\n  abstract draw(\r\n    ctx: CanvasRenderingContext2D,\r\n    parentCenter: Point,\r\n    parentTransform: Transform\r\n  ): void;\r\n\r\n  abstract getParams(): Param[];\r\n}\r\n\r\nabstract class NGon extends Shape {\r\n  points: Point[];\r\n  drawPoints: Point[];\r\n\r\n  constructor(transform: Transform, parent: Shape) {\r\n    super(transform, parent);\r\n    this.drawPoints = [];\r\n  }\r\n\r\n  isStable() {\r\n    for (const point of this.drawPoints) {\r\n      if (!this.parent.isPointInside(point)) return false;\r\n    }\r\n    for (const sibling of this.parent.children.filter(\r\n      (node: Shape) => node !== this\r\n    )) {\r\n      for (const point of this.drawPoints) {\r\n        if (sibling.isPointInside(point)) return false;\r\n      }\r\n      for (const point of sibling.getPoints()) {\r\n        if (this.isPointInside(point)) return false;\r\n      }\r\n      if (this.isIntersecting(sibling)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getCenter(): Point {\r\n    return this.drawPoints.reduce(function (\r\n      prev: Point,\r\n      curr: Point,\r\n      _: number,\r\n      points: Point[]\r\n    ): Point {\r\n      return new Point(\r\n        prev.x + curr.x / points.length,\r\n        prev.y + curr.y / points.length\r\n      );\r\n    },\r\n    new Point(0, 0));\r\n  }\r\n\r\n  draw(\r\n    ctx: CanvasRenderingContext2D,\r\n    parentCenter: Point = null,\r\n    parentTransform: Transform = null\r\n  ): void {\r\n    if (parentCenter === null) {\r\n      parentCenter = new Point(0, 0);\r\n    }\r\n    if (parentTransform === null) {\r\n      parentTransform = new Transform(Point.zero, 0, Point.unit);\r\n    }\r\n    const absoluteTransform = new Transform(\r\n      new Point(\r\n        parentCenter.x + this.transform.position.x,\r\n        parentCenter.y + this.transform.position.y\r\n      ),\r\n      parentTransform.rotation + this.transform.rotation,\r\n      new Point(\r\n        parentTransform.scale.x * this.transform.scale.x,\r\n        parentTransform.scale.y * this.transform.scale.y\r\n      )\r\n    );\r\n    this.drawPoints = this.points.map((point) => {\r\n      const drawPoint = new Point(\r\n        parentCenter.x +\r\n          this.transform.position.x +\r\n          point.x * absoluteTransform.scale.x,\r\n        parentCenter.y +\r\n          this.transform.position.y +\r\n          point.y * absoluteTransform.scale.y\r\n      );\r\n      drawPoint.rotateAround(\r\n        new Point(absoluteTransform.position.x, absoluteTransform.position.y),\r\n        this.transform.rotation\r\n      );\r\n      drawPoint.rotateAround(parentCenter, parentTransform.rotation);\r\n\r\n      return drawPoint;\r\n    });\r\n    const prevStrokeStyle = ctx.strokeStyle;\r\n    if (this.isStable()) {\r\n      ctx.strokeStyle = \"black\";\r\n    } else {\r\n      ctx.strokeStyle = \"red\";\r\n    }\r\n    ctx.beginPath();\r\n    ctx.moveTo(this.drawPoints[0].x, this.drawPoints[0].y);\r\n    for (let i = 1; i < this.drawPoints.length; i++) {\r\n      ctx.lineTo(this.drawPoints[i].x, this.drawPoints[i].y);\r\n    }\r\n    ctx.lineTo(this.drawPoints[0].x, this.drawPoints[0].y);\r\n    ctx.stroke();\r\n\r\n    this.children.forEach((child) =>\r\n      child.draw(ctx, this.getCenter(), absoluteTransform)\r\n    );\r\n\r\n    ctx.strokeStyle = prevStrokeStyle;\r\n  }\r\n\r\n  getPoints() {\r\n    return this.drawPoints;\r\n  }\r\n\r\n  isPointInside(point: Point): boolean {\r\n    const { x, y } = point;\r\n\r\n    let inside: boolean = false;\r\n    for (\r\n      var i = 0, j = this.drawPoints.length - 1;\r\n      i < this.drawPoints.length;\r\n      j = i++\r\n    ) {\r\n      var xi = this.drawPoints[i].x,\r\n        yi = this.drawPoints[i].y;\r\n      var xj = this.drawPoints[j].x,\r\n        yj = this.drawPoints[j].y;\r\n\r\n      var intersect =\r\n        yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\r\n      if (intersect) inside = !inside;\r\n    }\r\n\r\n    return inside;\r\n  }\r\n\r\n  isIntersecting(shape: Shape): boolean {\r\n    if (!(shape instanceof NGon)) {\r\n      throw \"Not implemented\";\r\n    }\r\n    const ngon: NGon = shape as NGon;\r\n    let myLines: Line[] = [];\r\n    for (let i = 0; i < this.drawPoints.length; i++) {\r\n      myLines.push({\r\n        point1: this.drawPoints[i],\r\n        point2: this.drawPoints[(i + 1) % this.drawPoints.length], //Мы хотим получить все линии, в том числе от последней точки к стартовой\r\n      });\r\n    }\r\n    let ngonLines: Line[] = [];\r\n    for (let i = 0; i < ngon.drawPoints.length; i++) {\r\n      ngonLines.push({\r\n        point1: ngon.drawPoints[i],\r\n        point2: ngon.drawPoints[(i + 1) % ngon.drawPoints.length], //Мы хотим получить все линии, в том числе от последней точки к стартовой\r\n      });\r\n    }\r\n    for (const myLine of myLines) {\r\n      for (const ngonLine of ngonLines) {\r\n        if (line_intersects(myLine, ngonLine)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport class Rectangle extends NGon {\r\n  get type(): ShapeType {\r\n    return ShapeType.Rectangle;\r\n  }\r\n\r\n  constructor(\r\n    width: number,\r\n    height: number,\r\n    transform: Transform,\r\n    parent: Shape\r\n  ) {\r\n    super(transform, parent);\r\n    this.points = [];\r\n    const hWidth: number = width / 2;\r\n    const hHeight: number = height / 2;\r\n    this.points.push(new Point(-hWidth, +hHeight));\r\n    this.points.push(new Point(+hWidth, +hHeight));\r\n    this.points.push(new Point(+hWidth, -hHeight));\r\n    this.points.push(new Point(-hWidth, -hHeight));\r\n  }\r\n\r\n  getParams() {\r\n    return [\r\n      { id: \"width\", name: \"Width\" },\r\n      { id: \"height\", name: \"Height\" },\r\n    ];\r\n  }\r\n\r\n  static buildFromParams(parent, transfrom: Transform, { width, height }) {\r\n    return new Rectangle(width, height, transfrom, parent);\r\n  }\r\n}\r\n\r\nexport class Circle extends NGon {\r\n  get type(): ShapeType {\r\n    return ShapeType.Circle;\r\n  }\r\n\r\n  pointsAmount: number = 100;\r\n  constructor(radius: number, transform: Transform, parent: Shape = null) {\r\n    super(transform, parent);\r\n    this.points = [];\r\n    const rotationAngle: number = (Math.PI * 2) / this.pointsAmount;\r\n    let angle: number = 0;\r\n    for (let i = 0; i < this.pointsAmount; i++) {\r\n      this.points.push(\r\n        new Point(Math.cos(angle) * radius, Math.sin(angle) * radius)\r\n      );\r\n      angle += rotationAngle;\r\n    }\r\n  }\r\n\r\n  getParams() {\r\n    return [{ id: \"radius\", name: \"Radius\" }];\r\n  }\r\n\r\n  static buildFromParams(parent, transfrom: Transform, { radius }) {\r\n    return new Circle(radius, transfrom, parent);\r\n  }\r\n}\r\n\r\nexport class Triangle extends NGon {\r\n  get type(): ShapeType {\r\n    return ShapeType.Triangle;\r\n  }\r\n\r\n  constructor(\r\n    point1: Point,\r\n    point2: Point,\r\n    point3: Point,\r\n    transform: Transform,\r\n    parent: Shape = null\r\n  ) {\r\n    super(transform, parent);\r\n    this.points = [point1, point2, point3];\r\n  }\r\n\r\n  getParams() {\r\n    return [\r\n      { id: \"point1_x\", name: \"X1\" },\r\n      { id: \"point1_y\", name: \"Y1\" },\r\n      { id: \"point2_x\", name: \"X2\" },\r\n      { id: \"point2_y\", name: \"Y2\" },\r\n      { id: \"point3_x\", name: \"X3\" },\r\n      { id: \"point3_y\", name: \"Y3\" },\r\n    ];\r\n  }\r\n\r\n  static buildFromParams(\r\n    parent,\r\n    transfrom: Transform,\r\n    { point1_x, point1_y, point2_x, point2_y, point3_x, point3_y }\r\n  ) {\r\n    return new Triangle(\r\n      new Point(point1_x, point1_y),\r\n      new Point(point2_x, point2_y),\r\n      new Point(point3_x, point3_y),\r\n      transfrom,\r\n      parent\r\n    );\r\n  }\r\n}\r\n\r\nexport class Canvas extends Rectangle {\r\n  get type(): ShapeType {\r\n    return ShapeType.Canvas;\r\n  }\r\n\r\n  isStable() {\r\n    return true;\r\n  }\r\n\r\n  constructor(width: number, height: number, transform: Transform) {\r\n    super(width, height, transform, null);\r\n  }\r\n}\r\n\r\nexport interface IElement {\r\n  getElement(): HTMLElement;\r\n  render(canvas: Canvas | null): void;\r\n}\r\n\r\nexport class Hierarchy implements IElement {\r\n  private readonly element: HTMLUListElement;\r\n  selectNode: (node: Shape) => void;\r\n\r\n  constructor(selectNode: (node: Shape) => void) {\r\n    this.element = document.createElement(\"ul\");\r\n    this.element.classList.add(\"tree\");\r\n    this.selectNode = selectNode;\r\n  }\r\n\r\n  getElement(): HTMLUListElement {\r\n    return this.element;\r\n  }\r\n\r\n  private makeHierarchy(node: Shape): HTMLLIElement {\r\n    let li = document.createElement(\"li\");\r\n\r\n    let span = document.createElement(\"span\");\r\n    span.innerText = ShapeNamesMap[node.type];\r\n    if (node.selected) {\r\n      span.classList.add(\"active\");\r\n    }\r\n    span.addEventListener(\"click\", () => {\r\n      this.selectNode(node);\r\n    });\r\n    li.appendChild(span);\r\n\r\n    let innerUl = document.createElement(\"ul\");\r\n    for (const child of node.children) {\r\n      innerUl.appendChild(this.makeHierarchy(child));\r\n    }\r\n\r\n    li.appendChild(innerUl);\r\n    return li;\r\n  }\r\n\r\n  render(canvas: Canvas): void {\r\n    this.element.innerHTML = \"\";\r\n    this.element.appendChild(this.makeHierarchy(canvas));\r\n  }\r\n}\r\n\r\nexport class CreationForm implements IElement {\r\n  private readonly element: HTMLDivElement;\r\n  private shape: any;\r\n  private isEdit: boolean;\r\n  private readonly shapes: any[];\r\n  createtNode: (type: any, transform: Transform, params: any) => boolean;\r\n  previewNode: (type: any, transform: Transform, params: any) => void;\r\n  cancel: () => void;\r\n  translate: (translate: Transform) => boolean;\r\n  previewTranslate: (translate: Transform) => void;\r\n\r\n  constructor(\r\n    shapes: any[],\r\n    createtNode: (type: any, transform: Transform, params: any) => boolean,\r\n    previewNode: (type: any, transform: Transform, params: any) => void,\r\n    cancel: () => void,\r\n    translate: (translate: Transform) => boolean,\r\n    previewTranslate: (translate: Transform) => void\r\n  ) {\r\n    this.shapes = shapes;\r\n    this.createtNode = createtNode;\r\n    this.previewNode = previewNode;\r\n    this.cancel = cancel;\r\n    this.translate = translate;\r\n    this.previewTranslate = previewTranslate;\r\n    this.element = document.createElement(\"div\");\r\n    this.render();\r\n  }\r\n\r\n  getElement() {\r\n    return this.element;\r\n  }\r\n\r\n  private setShape(shape: any): void {\r\n    this.shape = shape;\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    this.element.innerHTML = \"\";\r\n\r\n    if (!this.shape && !this.isEdit) {\r\n      {\r\n        const label = document.createElement(\"label\");\r\n        label.classList.add(\"mr-2\");\r\n        label.innerText = \"Edit:\";\r\n        this.element.appendChild(label);\r\n        const btn = document.createElement(\"div\");\r\n        btn.classList.add(\"btn\", \"btn-primary\", \"mr-2\");\r\n        btn.innerText = \"Edit\";\r\n        btn.addEventListener(\"click\", () => {\r\n          this.isEdit = true;\r\n          this.render();\r\n        });\r\n        this.element.appendChild(btn);\r\n      }\r\n      {\r\n        const label = document.createElement(\"label\");\r\n        label.classList.add(\"mr-2\");\r\n        label.innerText = \"Create:\";\r\n        this.element.appendChild(label);\r\n        const btnsGroup = document.createElement(\"div\");\r\n        btnsGroup.classList.add(\"btn-group\");\r\n        for (const shape of this.shapes) {\r\n          this.isEdit = false;\r\n          const btn = document.createElement(\"button\");\r\n          btn.classList.add(\"btn\", \"btn-success\");\r\n          btn.innerText = ShapeNamesMap[shape.prototype.type];\r\n          btn.addEventListener(\"click\", (e) => {\r\n            this.setShape(shape);\r\n          });\r\n          btnsGroup.appendChild(btn);\r\n        }\r\n        this.element.appendChild(btnsGroup);\r\n      }\r\n    } else {\r\n      const cancelBtn = document.createElement(\"button\");\r\n      cancelBtn.classList.add(\"btn\", \"btn-danger\", \"mb-1\");\r\n      cancelBtn.innerText = \"Cancel\";\r\n      cancelBtn.addEventListener(\"click\", (e) => {\r\n        if (this.isEdit) {\r\n          this.previewTranslate(Transform.zero);\r\n          this.isEdit = false;\r\n          this.cancel();\r\n          this.render();\r\n        } else {\r\n          this.shape = null;\r\n          this.cancel();\r\n          this.render();\r\n        }\r\n      });\r\n      this.element.appendChild(cancelBtn);\r\n\r\n      let inputs: HTMLInputElement[] = [];\r\n      if (!this.isEdit) {\r\n        const inputGroupParams = document.createElement(\"div\");\r\n        inputGroupParams.classList.add(\"input-group\", \"d-flex\", \"mb-1\");\r\n        const params = this.shape.prototype.getParams();\r\n        for (const param of params) {\r\n          const input = document.createElement(\"input\");\r\n          input.classList.add(\"form-control\");\r\n          input.placeholder = param.name;\r\n          input.name = param.id;\r\n          inputs.push(input);\r\n          inputGroupParams.appendChild(input);\r\n        }\r\n        this.element.appendChild(inputGroupParams);\r\n      }\r\n\r\n      const inputGroupTransform = document.createElement(\"div\");\r\n      inputGroupTransform.classList.add(\"input-group\", \"d-flex\");\r\n\r\n      const xLabel = document.createElement(\"label\");\r\n      xLabel.classList.add(\"d-flex\", \"col-form-label\");\r\n      xLabel.textContent = \"X:\";\r\n      const xInput = document.createElement(\"input\");\r\n      xInput.classList.add(\"form-control\", \"w-auto\", \"mt-n2\", \"mr-2\", \"ml-1\");\r\n      xInput.value = \"0\";\r\n      xLabel.appendChild(xInput);\r\n      inputGroupTransform.appendChild(xLabel);\r\n\r\n      const yLabel = document.createElement(\"label\");\r\n      yLabel.classList.add(\"d-flex\", \"col-form-label\");\r\n      yLabel.textContent = \"Y:\";\r\n      const yInput = document.createElement(\"input\");\r\n      yInput.classList.add(\"form-control\", \"w-auto\", \"mt-n2\", \"mr-2\", \"ml-1\");\r\n      yInput.value = \"0\";\r\n      yLabel.appendChild(yInput);\r\n      inputGroupTransform.appendChild(yLabel);\r\n\r\n      const rotationLabel = document.createElement(\"label\");\r\n      rotationLabel.classList.add(\"d-flex\", \"col-form-label\");\r\n      rotationLabel.textContent = \"Rotation(deg):\";\r\n      const rotationInput = document.createElement(\"input\");\r\n      rotationInput.classList.add(\r\n        \"form-control\",\r\n        \"w-auto\",\r\n        \"mt-n2\",\r\n        \"mr-2\",\r\n        \"ml-1\"\r\n      );\r\n      rotationInput.value = \"0\";\r\n      rotationLabel.appendChild(rotationInput);\r\n      inputGroupTransform.appendChild(rotationLabel);\r\n\r\n      const xScaleLabel = document.createElement(\"label\");\r\n      xScaleLabel.classList.add(\"d-flex\", \"col-form-label\");\r\n      xScaleLabel.textContent = \"X Scale:\";\r\n      const xScaleInput = document.createElement(\"input\");\r\n      xScaleInput.classList.add(\r\n        \"form-control\",\r\n        \"w-auto\",\r\n        \"mt-n2\",\r\n        \"mr-2\",\r\n        \"ml-1\"\r\n      );\r\n      xScaleInput.value = \"1\";\r\n      xScaleLabel.appendChild(xScaleInput);\r\n      inputGroupTransform.appendChild(xScaleLabel);\r\n\r\n      const yScaleLabel = document.createElement(\"label\");\r\n      yScaleLabel.classList.add(\"d-flex\", \"col-form-label\");\r\n      yScaleLabel.textContent = \"Y Scale:\";\r\n      const yScaleInput = document.createElement(\"input\");\r\n      yScaleInput.classList.add(\r\n        \"form-control\",\r\n        \"w-auto\",\r\n        \"mt-n2\",\r\n        \"mr-2\",\r\n        \"ml-1\"\r\n      );\r\n      yScaleInput.value = \"1\";\r\n      yScaleLabel.appendChild(yScaleInput);\r\n      inputGroupTransform.appendChild(yScaleLabel);\r\n      this.element.appendChild(inputGroupTransform);\r\n\r\n      [\r\n        ...inputs,\r\n        xInput,\r\n        yInput,\r\n        rotationInput,\r\n        xScaleInput,\r\n        yScaleInput,\r\n      ].forEach((el) => {\r\n        el.type = \"number\";\r\n        el.addEventListener(\"change\", () => {\r\n          let params = [];\r\n          const transfrom: Transform = new Transform(\r\n            new Point(parseInt(xInput.value), parseInt(yInput.value)),\r\n            parseInt(rotationInput.value),\r\n            new Point(parseInt(xScaleInput.value), parseInt(yScaleInput.value))\r\n          );\r\n          if (!this.isEdit) {\r\n            for (const input of inputs) {\r\n              params[input.name] = input.value;\r\n            }\r\n            this.previewNode(this.shape, transfrom, params);\r\n          } else {\r\n            this.previewTranslate(transfrom);\r\n          }\r\n        });\r\n      });\r\n\r\n      const addBtn = document.createElement(\"btn\");\r\n      addBtn.classList.add(\"btn\", \"btn-primary\");\r\n      addBtn.innerText = \"Save\";\r\n      addBtn.addEventListener(\"click\", () => {\r\n        let params = [];\r\n        const transfrom: Transform = new Transform(\r\n          new Point(parseInt(xInput.value), parseInt(yInput.value)),\r\n          parseInt(rotationInput.value),\r\n          new Point(parseInt(xScaleInput.value), parseInt(yScaleInput.value))\r\n        );\r\n        for (const input of inputs) {\r\n          params[input.name] = input.value;\r\n        }\r\n        if (this.isEdit) {\r\n          if (this.translate(transfrom)) {\r\n            this.isEdit = false;\r\n            this.render();\r\n          }\r\n        } else {\r\n          if (this.createtNode(this.shape, transfrom, params)) {\r\n            this.shape = null;\r\n            this.render();\r\n          }\r\n        }\r\n      });\r\n      this.element.appendChild(addBtn);\r\n\r\n      var event = new Event(\"change\");\r\n      xInput.dispatchEvent(event);\r\n    }\r\n  }\r\n}\r\n\r\nexport class Controller implements IElement {\r\n  private readonly drawingCanvas: DrawingCanvas;\r\n  private readonly hierarchy: Hierarchy;\r\n  private readonly creationForm: CreationForm;\r\n  private readonly canvas: Canvas;\r\n  private selectedNode: Shape;\r\n  private previewNode: Shape;\r\n  private isInEdit: boolean;\r\n  private readonly element: HTMLDivElement;\r\n\r\n  constructor(width: number = 640, height: number = 480) {\r\n    this.element = document.createElement(\"div\");\r\n    this.element.classList.add(\"row\", \"mt-2\");\r\n\r\n    this.drawingCanvas = new DrawingCanvas(width, height, (point: Point) =>\r\n      this.selectNodeAtPoint(point)\r\n    );\r\n    const canvasContainer = document.createElement(\"div\");\r\n    canvasContainer.classList.add(\"col-12\", \"col-md-8\");\r\n    canvasContainer.appendChild(this.drawingCanvas.getElement());\r\n    this.element.appendChild(canvasContainer);\r\n\r\n    this.hierarchy = new Hierarchy((node: Shape) => this.selectNode(node));\r\n    const hierarhyContainer = document.createElement(\"div\");\r\n    hierarhyContainer.classList.add(\"col-12\", \"col-md-4\");\r\n    hierarhyContainer.appendChild(this.hierarchy.getElement());\r\n    this.element.appendChild(hierarhyContainer);\r\n\r\n    this.creationForm = new CreationForm(\r\n      [Rectangle, Triangle, Circle],\r\n      (type: any, transform: Transform, params: any) =>\r\n        this.createNode(type, transform, params),\r\n      (type: any, transform: Transform, params: any) =>\r\n        this.preview(type, transform, params),\r\n      () => this.removePreviewNode(),\r\n      (translate: Transform) => this.translate(translate),\r\n      (translate: Transform) => this.previewTranslate(translate)\r\n    );\r\n    const creationFormContainer = document.createElement(\"div\");\r\n    creationFormContainer.classList.add(\"col-12\", \"col-md-6\", \"mt-2\");\r\n    creationFormContainer.appendChild(this.creationForm.getElement());\r\n    this.element.appendChild(creationFormContainer);\r\n\r\n    this.canvas = new Canvas(\r\n      width,\r\n      height,\r\n      new Transform(new Point(width / 2, height / 2), 0, Point.unit)\r\n    );\r\n    this.selectedNode = null;\r\n    this.previewNode = null;\r\n    this.isInEdit = false;\r\n    this.selectNode(this.canvas);\r\n    this.render();\r\n  }\r\n\r\n  private selectNode(node: Shape): void {\r\n    if (this.previewNode !== null || this.isInEdit) {\r\n      alert(\"Please finish editing first!\");\r\n      return;\r\n    }\r\n    if (this.selectedNode !== null) {\r\n      this.selectedNode.selected = false;\r\n    }\r\n    node.selected = true;\r\n    this.selectedNode = node;\r\n    this.render();\r\n  }\r\n\r\n  private selectNodeAtPoint(point: Point): void {\r\n    console.log(\"hi\");\r\n    let currNode: Shape = this.canvas;\r\n    let step = true;\r\n    while (step) {\r\n      step = false;\r\n      for (const child of currNode.children) {\r\n        if (child.isPointInside(point)) {\r\n          currNode = child;\r\n          step = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.selectNode(currNode);\r\n  }\r\n\r\n  private removePreviewNode(): void {\r\n    this.isInEdit = false;\r\n    if (this.previewNode !== null) {\r\n      this.previewNode.parent.removeChild(this.previewNode);\r\n      this.previewNode = null;\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  private preview(type: any, transform: Transform, params: any) {\r\n    this.removePreviewNode();\r\n    if (this.selectedNode === null) {\r\n      alert(\"Please select node you want add new child to\");\r\n      return false;\r\n    }\r\n\r\n    const newNode = type.buildFromParams(this.selectedNode, transform, params);\r\n    this.selectedNode.addChild(newNode);\r\n    this.previewNode = newNode;\r\n    this.render();\r\n    return true;\r\n  }\r\n\r\n  private createNode(type: any, transform: Transform, params: any) {\r\n    if (!this.previewNode.isStable()) {\r\n      alert(\"New shape can't be placed here\");\r\n      return false;\r\n    }\r\n    this.removePreviewNode();\r\n    if (this.selectedNode === null) {\r\n      alert(\"Please select node you want add new child to\");\r\n      return false;\r\n    }\r\n    const newNode = type.buildFromParams(this.selectedNode, transform, params);\r\n    this.selectedNode.addChild(newNode);\r\n    this.render();\r\n    return true;\r\n  }\r\n\r\n  private translate(translate: Transform) {\r\n    if (this.selectedNode instanceof Canvas) return false;\r\n    const prevTransform = this.selectedNode.transform;\r\n    this.selectedNode.transform = this.selectedNode.transform.add(translate);\r\n    this.render();\r\n    if (this.selectedNode.isStable()) {\r\n      this.isInEdit = false;\r\n      return true;\r\n    } else {\r\n      this.selectedNode.transform = prevTransform;\r\n      alert(\"Shape can't be placed here\");\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private previewTranslate(translate: Transform) {\r\n    this.isInEdit = true;\r\n    if (this.selectedNode instanceof Canvas) return;\r\n    const prevTransform = this.selectedNode.transform;\r\n    this.selectedNode.transform = this.selectedNode.transform.add(translate);\r\n    this.render();\r\n    this.selectedNode.transform = prevTransform;\r\n  }\r\n\r\n  getElement(): HTMLDivElement {\r\n    return this.element;\r\n  }\r\n\r\n  render(): void {\r\n    this.drawingCanvas.render(this.canvas);\r\n    this.hierarchy.render(this.canvas);\r\n  }\r\n}\r\n\r\nfunction getCursorPosition(canvas, event) {\r\n  const rect = canvas.getBoundingClientRect();\r\n  const x = event.clientX - rect.left;\r\n  const y = event.clientY - rect.top;\r\n  return new Point(x, y);\r\n}\r\n\r\nexport class DrawingCanvas implements IElement {\r\n  private readonly canvas: HTMLCanvasElement;\r\n  private readonly canvasCtx: CanvasRenderingContext2D;\r\n  private readonly width: number;\r\n  private readonly height: number;\r\n\r\n  constructor(\r\n    width: number,\r\n    height: number,\r\n    selectNodeAtPoint: (point: Point) => void\r\n  ) {\r\n    this.width = width;\r\n    this.height = height;\r\n\r\n    this.canvas = document.createElement(\"canvas\");\r\n    this.canvasCtx = this.canvas.getContext(\"2d\");\r\n    this.canvas.setAttribute(\"width\", width.toString());\r\n    this.canvas.setAttribute(\"height\", height.toString());\r\n    this.canvas.classList.add(\"d-block\", \"m-auto\", \"align-self-center\");\r\n    this.canvas.addEventListener(\"mousedown\", (e) => {\r\n      selectNodeAtPoint(getCursorPosition(this.canvas, e));\r\n    });\r\n  }\r\n\r\n  getElement(): HTMLCanvasElement {\r\n    return this.canvas;\r\n  }\r\n\r\n  getCtx(): CanvasRenderingContext2D {\r\n    return this.canvasCtx;\r\n  }\r\n\r\n  clear(): void {\r\n    this.canvasCtx.clearRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  render(canvas: Canvas): void {\r\n    this.clear();\r\n    canvas.draw(this.canvasCtx, Point.zero, Transform.default);\r\n  }\r\n}\r\n\r\nconst main = document.getElementById(\"main\");\r\n\r\nconst controller = new Controller();\r\n\r\nmain.appendChild(controller.getElement());\r\n\r\n//controller.test();\r\n"]}